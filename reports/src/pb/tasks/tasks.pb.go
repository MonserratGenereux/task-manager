// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tasks/tasks.proto

/*
Package tasks is a generated protocol buffer package.

It is generated from these files:
	tasks/tasks.proto

It has these top-level messages:
	Task
	StatusResponse
	Tasks
	UserID
	TaskID
	GetTasksResponse
	GetTaskResponse
*/
package tasks

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	Id                 int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId             int64   `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Title              string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Description        string  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	CreatedTimestamp   int64   `protobuf:"varint,5,opt,name=created_timestamp,json=createdTimestamp" json:"created_timestamp,omitempty"`
	DueTimestamp       int64   `protobuf:"varint,6,opt,name=due_timestamp,json=dueTimestamp" json:"due_timestamp,omitempty"`
	CompletedTimestamp int64   `protobuf:"varint,7,opt,name=completed_timestamp,json=completedTimestamp" json:"completed_timestamp,omitempty"`
	ReminderTimestamp  []int64 `protobuf:"varint,8,rep,packed,name=reminder_timestamp,json=reminderTimestamp" json:"reminder_timestamp,omitempty"`
	DisplayColor       string  `protobuf:"bytes,9,opt,name=display_color,json=displayColor" json:"display_color,omitempty"`
	IsCompleted        bool    `protobuf:"varint,10,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	ReminderFlag       bool    `protobuf:"varint,11,opt,name=reminder_flag,json=reminderFlag" json:"reminder_flag,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *Task) GetDueTimestamp() int64 {
	if m != nil {
		return m.DueTimestamp
	}
	return 0
}

func (m *Task) GetCompletedTimestamp() int64 {
	if m != nil {
		return m.CompletedTimestamp
	}
	return 0
}

func (m *Task) GetReminderTimestamp() []int64 {
	if m != nil {
		return m.ReminderTimestamp
	}
	return nil
}

func (m *Task) GetDisplayColor() string {
	if m != nil {
		return m.DisplayColor
	}
	return ""
}

func (m *Task) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *Task) GetReminderFlag() bool {
	if m != nil {
		return m.ReminderFlag
	}
	return false
}

type StatusResponse struct {
	Succeeded bool   `protobuf:"varint,1,opt,name=succeeded" json:"succeeded,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *StatusResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Tasks struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *Tasks) Reset()                    { *m = Tasks{} }
func (m *Tasks) String() string            { return proto.CompactTextString(m) }
func (*Tasks) ProtoMessage()               {}
func (*Tasks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Tasks) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type UserID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserID) Reset()                    { *m = UserID{} }
func (m *UserID) String() string            { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()               {}
func (*UserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TaskID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *TaskID) Reset()                    { *m = TaskID{} }
func (m *TaskID) String() string            { return proto.CompactTextString(m) }
func (*TaskID) ProtoMessage()               {}
func (*TaskID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetTasksResponse struct {
	Succeded bool    `protobuf:"varint,1,opt,name=succeded" json:"succeded,omitempty"`
	Tasks    []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	Error    string  `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetTasksResponse) Reset()                    { *m = GetTasksResponse{} }
func (m *GetTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTasksResponse) ProtoMessage()               {}
func (*GetTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetTasksResponse) GetSucceded() bool {
	if m != nil {
		return m.Succeded
	}
	return false
}

func (m *GetTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *GetTasksResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetTaskResponse struct {
	Succeded bool   `protobuf:"varint,1,opt,name=succeded" json:"succeded,omitempty"`
	Task     *Task  `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetTaskResponse) Reset()                    { *m = GetTaskResponse{} }
func (m *GetTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTaskResponse) ProtoMessage()               {}
func (*GetTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetTaskResponse) GetSucceded() bool {
	if m != nil {
		return m.Succeded
	}
	return false
}

func (m *GetTaskResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *GetTaskResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "tasks.Task")
	proto.RegisterType((*StatusResponse)(nil), "tasks.StatusResponse")
	proto.RegisterType((*Tasks)(nil), "tasks.Tasks")
	proto.RegisterType((*UserID)(nil), "tasks.UserID")
	proto.RegisterType((*TaskID)(nil), "tasks.TaskID")
	proto.RegisterType((*GetTasksResponse)(nil), "tasks.GetTasksResponse")
	proto.RegisterType((*GetTaskResponse)(nil), "tasks.GetTaskResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TasksService service

type TasksServiceClient interface {
	// Get a list of tasks from the User ID
	GetTasks(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*GetTasksResponse, error)
	// Create a task based on the User ID
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusResponse, error)
	// Delete a task based on the User ID
	DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get a specific task based on the task ID
	GetTaskById(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// Update a specific task based on the task ID
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusResponse, error)
	// Mark the task as completed
	CompleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Task, error)
}

type tasksServiceClient struct {
	cc *grpc.ClientConn
}

func NewTasksServiceClient(cc *grpc.ClientConn) TasksServiceClient {
	return &tasksServiceClient{cc}
}

func (c *tasksServiceClient) GetTasks(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*GetTasksResponse, error) {
	out := new(GetTasksResponse)
	err := grpc.Invoke(ctx, "/tasks.TasksService/GetTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/tasks.TasksService/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) DeleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/tasks.TasksService/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) GetTaskById(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := grpc.Invoke(ctx, "/tasks.TasksService/GetTaskById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/tasks.TasksService/UpdateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksServiceClient) CompleteTask(ctx context.Context, in *TaskID, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/tasks.TasksService/CompleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TasksService service

type TasksServiceServer interface {
	// Get a list of tasks from the User ID
	GetTasks(context.Context, *UserID) (*GetTasksResponse, error)
	// Create a task based on the User ID
	CreateTask(context.Context, *Task) (*StatusResponse, error)
	// Delete a task based on the User ID
	DeleteTask(context.Context, *TaskID) (*StatusResponse, error)
	// Get a specific task based on the task ID
	GetTaskById(context.Context, *TaskID) (*GetTaskResponse, error)
	// Update a specific task based on the task ID
	UpdateTask(context.Context, *Task) (*StatusResponse, error)
	// Mark the task as completed
	CompleteTask(context.Context, *TaskID) (*Task, error)
}

func RegisterTasksServiceServer(s *grpc.Server, srv TasksServiceServer) {
	s.RegisterService(&_TasksService_serviceDesc, srv)
}

func _TasksService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TasksService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).GetTasks(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TasksService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TasksService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).DeleteTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TasksService/GetTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).GetTaskById(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TasksService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TasksService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TasksService/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServiceServer).CompleteTask(ctx, req.(*TaskID))
	}
	return interceptor(ctx, in, info, handler)
}

var _TasksService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.TasksService",
	HandlerType: (*TasksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasks",
			Handler:    _TasksService_GetTasks_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TasksService_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TasksService_DeleteTask_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _TasksService_GetTaskById_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TasksService_UpdateTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _TasksService_CompleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks/tasks.proto",
}

func init() { proto.RegisterFile("tasks/tasks.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0x0e, 0x18, 0x88, 0x19, 0x9b, 0x24, 0x6c, 0x7f, 0x62, 0xa1, 0x4a, 0x75, 0xdc, 0x0b, 0xea,
	0x0f, 0x91, 0x68, 0xd4, 0x07, 0x00, 0xd4, 0x8a, 0x43, 0x2f, 0x4e, 0x72, 0xe9, 0x05, 0x39, 0xde,
	0x29, 0x5a, 0xc5, 0x60, 0x6b, 0x77, 0xa9, 0x94, 0x17, 0xe8, 0xb3, 0xf5, 0xb1, 0xaa, 0x1d, 0xdb,
	0xd8, 0x46, 0x44, 0x6a, 0x2f, 0x48, 0x33, 0xf3, 0xcd, 0x7c, 0xdf, 0xcc, 0xb7, 0x18, 0x86, 0x3a,
	0x52, 0x8f, 0xea, 0x9a, 0x7e, 0x27, 0x99, 0x4c, 0x75, 0xca, 0xba, 0x14, 0x04, 0xbf, 0x2d, 0xe8,
	0xdc, 0x45, 0xea, 0x91, 0x9d, 0x41, 0x5b, 0x70, 0xaf, 0xe5, 0xb7, 0xc6, 0x56, 0xd8, 0x16, 0x9c,
	0x5d, 0xc2, 0xe9, 0x4e, 0xa1, 0x5c, 0x09, 0xee, 0xb5, 0x29, 0xd9, 0x33, 0xe1, 0x92, 0xb3, 0x97,
	0xd0, 0xd5, 0x42, 0x27, 0xe8, 0x59, 0x7e, 0x6b, 0xdc, 0x0f, 0xf3, 0x80, 0xf9, 0xe0, 0x70, 0x54,
	0xb1, 0x14, 0x99, 0x16, 0xe9, 0xd6, 0xeb, 0x50, 0xad, 0x9e, 0x62, 0x1f, 0x60, 0x18, 0x4b, 0x8c,
	0x34, 0xf2, 0x95, 0x16, 0x1b, 0x54, 0x3a, 0xda, 0x64, 0x5e, 0x97, 0x46, 0x5f, 0x14, 0x85, 0xbb,
	0x32, 0xcf, 0xde, 0xc1, 0x80, 0xef, 0xb0, 0x06, 0xec, 0x11, 0xd0, 0xe5, 0x3b, 0xac, 0x40, 0xd7,
	0xf0, 0x22, 0x4e, 0x37, 0x59, 0x82, 0xcd, 0x99, 0xa7, 0x04, 0x65, 0xfb, 0x52, 0xd5, 0xf0, 0x09,
	0x98, 0xc4, 0x8d, 0xd8, 0x72, 0x94, 0x35, 0xbc, 0xed, 0x5b, 0x63, 0x2b, 0x1c, 0x96, 0x95, 0xa6,
	0x08, 0xa1, 0xb2, 0x24, 0x7a, 0x5a, 0xc5, 0x69, 0x92, 0x4a, 0xaf, 0x4f, 0x5b, 0xb9, 0x45, 0x72,
	0x6e, 0x72, 0xec, 0x0a, 0x5c, 0xa1, 0x56, 0x7b, 0x32, 0x0f, 0xfc, 0xd6, 0xd8, 0x0e, 0x1d, 0xa1,
	0xe6, 0x65, 0xca, 0xcc, 0xd9, 0xd3, 0xfe, 0x4c, 0xa2, 0xb5, 0xe7, 0x10, 0xc6, 0x2d, 0x93, 0x5f,
	0x93, 0x68, 0x1d, 0x2c, 0xe0, 0xec, 0x56, 0x47, 0x7a, 0xa7, 0x42, 0x54, 0x59, 0xba, 0x55, 0xc8,
	0xde, 0x40, 0x5f, 0xed, 0xe2, 0x18, 0x91, 0x63, 0x6e, 0x8c, 0x1d, 0x56, 0x09, 0x63, 0x03, 0x4a,
	0x99, 0x4a, 0x72, 0xa7, 0x1f, 0xe6, 0x41, 0xf0, 0x1e, 0xba, 0xc6, 0x4d, 0xc5, 0xae, 0x20, 0x37,
	0xd8, 0x6b, 0xf9, 0xd6, 0xd8, 0x99, 0x3a, 0x93, 0xdc, 0x7b, 0x53, 0x0c, 0x0b, 0xeb, 0x3d, 0xe8,
	0xdd, 0x1b, 0x4b, 0x17, 0x87, 0xde, 0x9b, 0x8a, 0x01, 0x1e, 0xa9, 0xac, 0xe1, 0xe2, 0x1b, 0x6a,
	0xa2, 0xd8, 0xeb, 0x1c, 0x81, 0x4d, 0xb2, 0x2a, 0x99, 0xfb, 0xb8, 0x92, 0xd1, 0x7e, 0x4e, 0x46,
	0xb5, 0x88, 0x55, 0x5f, 0x84, 0xc3, 0x79, 0x41, 0xf4, 0x4f, 0x3c, 0x6f, 0xa1, 0x63, 0xa6, 0xd1,
	0x31, 0x0e, 0x68, 0xa8, 0x70, 0x9c, 0x65, 0xfa, 0xa7, 0x0d, 0x2e, 0x2d, 0x73, 0x8b, 0xf2, 0x97,
	0x88, 0x91, 0xdd, 0x80, 0x5d, 0xee, 0xc7, 0x06, 0xc5, 0x94, 0xfc, 0x48, 0xa3, 0xcb, 0x22, 0x3c,
	0xdc, 0x3f, 0x38, 0x61, 0x53, 0x80, 0x39, 0xbd, 0x60, 0xfa, 0x27, 0xd5, 0xd9, 0x47, 0xaf, 0x8a,
	0xa0, 0xe9, 0x6d, 0x70, 0xc2, 0x6e, 0x00, 0x16, 0x68, 0xde, 0x07, 0xf5, 0x0c, 0x6a, 0x3d, 0xcb,
	0xc5, 0xf3, 0x5d, 0x5f, 0xc0, 0x29, 0xf8, 0x67, 0x4f, 0x4b, 0x7e, 0xd8, 0xf6, 0xba, 0x29, 0xb1,
	0xa9, 0xf0, 0x3e, 0xe3, 0xff, 0xa7, 0xf0, 0x23, 0xb8, 0xe5, 0x1b, 0x3e, 0xa6, 0xb1, 0x3e, 0x24,
	0x38, 0x99, 0x4d, 0xe0, 0x3c, 0x4e, 0x37, 0x93, 0xda, 0x27, 0x66, 0x36, 0xa4, 0x3b, 0x7d, 0x17,
	0xb1, 0x4c, 0x55, 0x7e, 0xdf, 0x1f, 0x76, 0xf6, 0x90, 0x7f, 0x85, 0x1e, 0x7a, 0x84, 0xf9, 0xfc,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x58, 0x4d, 0x9b, 0x9b, 0x04, 0x00, 0x00,
}
