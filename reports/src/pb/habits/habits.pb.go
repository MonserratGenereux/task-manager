// Code generated by protoc-gen-go. DO NOT EDIT.
// source: habits/habits.proto

/*
Package habits is a generated protocol buffer package.

It is generated from these files:
	habits/habits.proto

It has these top-level messages:
	Habit
	HabitUpdate
	HabitCreate
	StatusResponse
	GetHabitsResponse
	GetHabitResponse
	HabitId
	UserId
	UserUpdate
*/
package habits

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Habit struct {
	// Unique in system
	XId    string `protobuf:"bytes,1,opt,name=_id,json=Id" json:"_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	// Attributes needed for Habits
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Good        bool    `protobuf:"varint,5,opt,name=good" json:"good,omitempty"`
	Bad         bool    `protobuf:"varint,6,opt,name=bad" json:"bad,omitempty"`
	Difficulty  string  `protobuf:"bytes,7,opt,name=difficulty" json:"difficulty,omitempty"`
	Score       float32 `protobuf:"fixed32,8,opt,name=score" json:"score,omitempty"`
	Color       string  `protobuf:"bytes,9,opt,name=color" json:"color,omitempty"`
}

func (m *Habit) Reset()                    { *m = Habit{} }
func (m *Habit) String() string            { return proto.CompactTextString(m) }
func (*Habit) ProtoMessage()               {}
func (*Habit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Habit) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *Habit) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Habit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Habit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Habit) GetGood() bool {
	if m != nil {
		return m.Good
	}
	return false
}

func (m *Habit) GetBad() bool {
	if m != nil {
		return m.Bad
	}
	return false
}

func (m *Habit) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

func (m *Habit) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Habit) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type HabitUpdate struct {
	XId         string `protobuf:"bytes,1,opt,name=_id,json=Id" json:"_id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Good        bool   `protobuf:"varint,5,opt,name=good" json:"good,omitempty"`
	Bad         bool   `protobuf:"varint,6,opt,name=bad" json:"bad,omitempty"`
	Difficulty  string `protobuf:"bytes,7,opt,name=difficulty" json:"difficulty,omitempty"`
}

func (m *HabitUpdate) Reset()                    { *m = HabitUpdate{} }
func (m *HabitUpdate) String() string            { return proto.CompactTextString(m) }
func (*HabitUpdate) ProtoMessage()               {}
func (*HabitUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HabitUpdate) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *HabitUpdate) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *HabitUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HabitUpdate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HabitUpdate) GetGood() bool {
	if m != nil {
		return m.Good
	}
	return false
}

func (m *HabitUpdate) GetBad() bool {
	if m != nil {
		return m.Bad
	}
	return false
}

func (m *HabitUpdate) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

type HabitCreate struct {
	UserId      string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Good        bool   `protobuf:"varint,4,opt,name=good" json:"good,omitempty"`
	Bad         bool   `protobuf:"varint,5,opt,name=bad" json:"bad,omitempty"`
	Difficulty  string `protobuf:"bytes,6,opt,name=difficulty" json:"difficulty,omitempty"`
}

func (m *HabitCreate) Reset()                    { *m = HabitCreate{} }
func (m *HabitCreate) String() string            { return proto.CompactTextString(m) }
func (*HabitCreate) ProtoMessage()               {}
func (*HabitCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HabitCreate) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *HabitCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HabitCreate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HabitCreate) GetGood() bool {
	if m != nil {
		return m.Good
	}
	return false
}

func (m *HabitCreate) GetBad() bool {
	if m != nil {
		return m.Bad
	}
	return false
}

func (m *HabitCreate) GetDifficulty() string {
	if m != nil {
		return m.Difficulty
	}
	return ""
}

type StatusResponse struct {
	Succeded bool   `protobuf:"varint,1,opt,name=succeded" json:"succeded,omitempty"`
	HabitId  string `protobuf:"bytes,2,opt,name=habitId" json:"habitId,omitempty"`
	Error    string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusResponse) GetSucceded() bool {
	if m != nil {
		return m.Succeded
	}
	return false
}

func (m *StatusResponse) GetHabitId() string {
	if m != nil {
		return m.HabitId
	}
	return ""
}

func (m *StatusResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetHabitsResponse struct {
	Succeded bool     `protobuf:"varint,1,opt,name=succeded" json:"succeded,omitempty"`
	Habits   []*Habit `protobuf:"bytes,2,rep,name=habits" json:"habits,omitempty"`
}

func (m *GetHabitsResponse) Reset()                    { *m = GetHabitsResponse{} }
func (m *GetHabitsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHabitsResponse) ProtoMessage()               {}
func (*GetHabitsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetHabitsResponse) GetSucceded() bool {
	if m != nil {
		return m.Succeded
	}
	return false
}

func (m *GetHabitsResponse) GetHabits() []*Habit {
	if m != nil {
		return m.Habits
	}
	return nil
}

type GetHabitResponse struct {
	Succeded bool   `protobuf:"varint,1,opt,name=succeded" json:"succeded,omitempty"`
	Habit    *Habit `protobuf:"bytes,2,opt,name=habit" json:"habit,omitempty"`
}

func (m *GetHabitResponse) Reset()                    { *m = GetHabitResponse{} }
func (m *GetHabitResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHabitResponse) ProtoMessage()               {}
func (*GetHabitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetHabitResponse) GetSucceded() bool {
	if m != nil {
		return m.Succeded
	}
	return false
}

func (m *GetHabitResponse) GetHabit() *Habit {
	if m != nil {
		return m.Habit
	}
	return nil
}

type HabitId struct {
	XId string `protobuf:"bytes,1,opt,name=_id,json=Id" json:"_id,omitempty"`
}

func (m *HabitId) Reset()                    { *m = HabitId{} }
func (m *HabitId) String() string            { return proto.CompactTextString(m) }
func (*HabitId) ProtoMessage()               {}
func (*HabitId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HabitId) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

type UserId struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserId) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type UserUpdate struct {
	XId  string `protobuf:"bytes,1,opt,name=_id,json=Id" json:"_id,omitempty"`
	Bad  bool   `protobuf:"varint,2,opt,name=bad" json:"bad,omitempty"`
	Good bool   `protobuf:"varint,3,opt,name=good" json:"good,omitempty"`
}

func (m *UserUpdate) Reset()                    { *m = UserUpdate{} }
func (m *UserUpdate) String() string            { return proto.CompactTextString(m) }
func (*UserUpdate) ProtoMessage()               {}
func (*UserUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserUpdate) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *UserUpdate) GetBad() bool {
	if m != nil {
		return m.Bad
	}
	return false
}

func (m *UserUpdate) GetGood() bool {
	if m != nil {
		return m.Good
	}
	return false
}

func init() {
	proto.RegisterType((*Habit)(nil), "habits.Habit")
	proto.RegisterType((*HabitUpdate)(nil), "habits.HabitUpdate")
	proto.RegisterType((*HabitCreate)(nil), "habits.HabitCreate")
	proto.RegisterType((*StatusResponse)(nil), "habits.StatusResponse")
	proto.RegisterType((*GetHabitsResponse)(nil), "habits.GetHabitsResponse")
	proto.RegisterType((*GetHabitResponse)(nil), "habits.GetHabitResponse")
	proto.RegisterType((*HabitId)(nil), "habits.HabitId")
	proto.RegisterType((*UserId)(nil), "habits.UserId")
	proto.RegisterType((*UserUpdate)(nil), "habits.UserUpdate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HabitsService service

type HabitsServiceClient interface {
	// Retrieve all habits from user
	GetHabits(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GetHabitsResponse, error)
	// Gets an habit by ID
	GetHabitById(ctx context.Context, in *HabitId, opts ...grpc.CallOption) (*GetHabitResponse, error)
	// Deletes a habit by id
	DeleteHabit(ctx context.Context, in *HabitId, opts ...grpc.CallOption) (*StatusResponse, error)
	// Creates new Habit, id not needed
	CreateHabit(ctx context.Context, in *HabitCreate, opts ...grpc.CallOption) (*StatusResponse, error)
	// Updates all fields in the given habit.
	UpdateHabit(ctx context.Context, in *HabitUpdate, opts ...grpc.CallOption) (*StatusResponse, error)
	// Set as done a habit by id
	MarkHabit(ctx context.Context, in *UserUpdate, opts ...grpc.CallOption) (*GetHabitResponse, error)
}

type habitsServiceClient struct {
	cc *grpc.ClientConn
}

func NewHabitsServiceClient(cc *grpc.ClientConn) HabitsServiceClient {
	return &habitsServiceClient{cc}
}

func (c *habitsServiceClient) GetHabits(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GetHabitsResponse, error) {
	out := new(GetHabitsResponse)
	err := grpc.Invoke(ctx, "/habits.HabitsService/GetHabits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsServiceClient) GetHabitById(ctx context.Context, in *HabitId, opts ...grpc.CallOption) (*GetHabitResponse, error) {
	out := new(GetHabitResponse)
	err := grpc.Invoke(ctx, "/habits.HabitsService/GetHabitById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsServiceClient) DeleteHabit(ctx context.Context, in *HabitId, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/habits.HabitsService/DeleteHabit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsServiceClient) CreateHabit(ctx context.Context, in *HabitCreate, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/habits.HabitsService/CreateHabit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsServiceClient) UpdateHabit(ctx context.Context, in *HabitUpdate, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/habits.HabitsService/UpdateHabit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitsServiceClient) MarkHabit(ctx context.Context, in *UserUpdate, opts ...grpc.CallOption) (*GetHabitResponse, error) {
	out := new(GetHabitResponse)
	err := grpc.Invoke(ctx, "/habits.HabitsService/MarkHabit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HabitsService service

type HabitsServiceServer interface {
	// Retrieve all habits from user
	GetHabits(context.Context, *UserId) (*GetHabitsResponse, error)
	// Gets an habit by ID
	GetHabitById(context.Context, *HabitId) (*GetHabitResponse, error)
	// Deletes a habit by id
	DeleteHabit(context.Context, *HabitId) (*StatusResponse, error)
	// Creates new Habit, id not needed
	CreateHabit(context.Context, *HabitCreate) (*StatusResponse, error)
	// Updates all fields in the given habit.
	UpdateHabit(context.Context, *HabitUpdate) (*StatusResponse, error)
	// Set as done a habit by id
	MarkHabit(context.Context, *UserUpdate) (*GetHabitResponse, error)
}

func RegisterHabitsServiceServer(s *grpc.Server, srv HabitsServiceServer) {
	s.RegisterService(&_HabitsService_serviceDesc, srv)
}

func _HabitsService_GetHabits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServiceServer).GetHabits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habits.HabitsService/GetHabits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServiceServer).GetHabits(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitsService_GetHabitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServiceServer).GetHabitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habits.HabitsService/GetHabitById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServiceServer).GetHabitById(ctx, req.(*HabitId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitsService_DeleteHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServiceServer).DeleteHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habits.HabitsService/DeleteHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServiceServer).DeleteHabit(ctx, req.(*HabitId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitsService_CreateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServiceServer).CreateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habits.HabitsService/CreateHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServiceServer).CreateHabit(ctx, req.(*HabitCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitsService_UpdateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServiceServer).UpdateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habits.HabitsService/UpdateHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServiceServer).UpdateHabit(ctx, req.(*HabitUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitsService_MarkHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitsServiceServer).MarkHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/habits.HabitsService/MarkHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitsServiceServer).MarkHabit(ctx, req.(*UserUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _HabitsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "habits.HabitsService",
	HandlerType: (*HabitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHabits",
			Handler:    _HabitsService_GetHabits_Handler,
		},
		{
			MethodName: "GetHabitById",
			Handler:    _HabitsService_GetHabitById_Handler,
		},
		{
			MethodName: "DeleteHabit",
			Handler:    _HabitsService_DeleteHabit_Handler,
		},
		{
			MethodName: "CreateHabit",
			Handler:    _HabitsService_CreateHabit_Handler,
		},
		{
			MethodName: "UpdateHabit",
			Handler:    _HabitsService_UpdateHabit_Handler,
		},
		{
			MethodName: "MarkHabit",
			Handler:    _HabitsService_MarkHabit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "habits/habits.proto",
}

func init() { proto.RegisterFile("habits/habits.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xed, 0xd8, 0x89, 0xc7, 0xb4, 0x94, 0x2d, 0xaa, 0x96, 0x1c, 0x90, 0xb5, 0x08, 0x29,
	0xa7, 0x22, 0x95, 0x4b, 0xa5, 0x72, 0x6a, 0x91, 0x68, 0x0e, 0x5c, 0x1c, 0x95, 0x03, 0x42, 0x42,
	0x8e, 0x77, 0x0a, 0x16, 0x21, 0x6b, 0xad, 0x37, 0x48, 0xfd, 0x39, 0xfc, 0x05, 0x7e, 0x0d, 0x7f,
	0x85, 0x1b, 0xf2, 0x7e, 0xe4, 0xcb, 0x75, 0x94, 0x6b, 0x4f, 0xd9, 0xf7, 0x36, 0x6f, 0xfc, 0x66,
	0xe6, 0x69, 0xe1, 0xe4, 0x7b, 0x3e, 0x2d, 0x55, 0xfd, 0xc6, 0xfc, 0x9c, 0x55, 0x52, 0x28, 0x41,
	0x22, 0x83, 0xd8, 0x5f, 0x0f, 0xc2, 0x9b, 0xe6, 0x48, 0x9e, 0x42, 0xf0, 0xb5, 0xe4, 0xd4, 0x4b,
	0xbd, 0x51, 0x9c, 0xf9, 0x63, 0x4e, 0x4e, 0x21, 0x5a, 0xd4, 0x28, 0xc7, 0x9c, 0xfa, 0x9a, 0xb3,
	0x88, 0x10, 0xe8, 0xcd, 0xf3, 0x9f, 0x48, 0x03, 0xcd, 0xea, 0x33, 0x49, 0x21, 0xe1, 0x58, 0x17,
	0xb2, 0xac, 0x54, 0x29, 0xe6, 0xb4, 0xa7, 0xaf, 0xd6, 0xa9, 0x46, 0xf5, 0x4d, 0x08, 0x4e, 0xc3,
	0xd4, 0x1b, 0x0d, 0x32, 0x7d, 0x26, 0xc7, 0x10, 0x4c, 0x73, 0x4e, 0x23, 0x4d, 0x35, 0x47, 0xf2,
	0x12, 0x80, 0x97, 0x77, 0x77, 0x65, 0xb1, 0x98, 0xa9, 0x7b, 0xda, 0xd7, 0x65, 0xd6, 0x18, 0xf2,
	0x1c, 0xc2, 0xba, 0x10, 0x12, 0xe9, 0x20, 0xf5, 0x46, 0x7e, 0x66, 0x40, 0xc3, 0x16, 0x62, 0x26,
	0x24, 0x8d, 0xb5, 0xc0, 0x00, 0xf6, 0xc7, 0x83, 0x44, 0xb7, 0x76, 0x5b, 0xf1, 0x5c, 0xe1, 0xa3,
	0x68, 0x90, 0xfd, 0x76, 0xa6, 0xaf, 0x25, 0x36, 0xa6, 0x57, 0x1e, 0xbd, 0x07, 0x3d, 0xfa, 0xdd,
	0x1e, 0x83, 0x6e, 0x8f, 0xbd, 0xb6, 0xc7, 0xb0, 0xcb, 0x63, 0xd4, 0xf2, 0xf8, 0x05, 0x8e, 0x26,
	0x2a, 0x57, 0x8b, 0x3a, 0xc3, 0xba, 0x12, 0xf3, 0x1a, 0xc9, 0x10, 0x06, 0xf5, 0xa2, 0x28, 0x90,
	0xa3, 0xf1, 0x39, 0xc8, 0x96, 0x98, 0x50, 0xe8, 0xeb, 0xac, 0x2d, 0xc7, 0xec, 0x60, 0xb3, 0x36,
	0x94, 0x52, 0x48, 0xeb, 0xd4, 0x00, 0xf6, 0x09, 0x9e, 0x7d, 0x40, 0xa5, 0x67, 0xb0, 0xdf, 0x07,
	0x5e, 0x83, 0x0d, 0x33, 0xf5, 0xd3, 0x60, 0x94, 0x9c, 0x1f, 0x9e, 0xd9, 0xa4, 0xeb, 0x1a, 0x99,
	0x4b, 0xfa, 0x04, 0x8e, 0x5d, 0xdd, 0xbd, 0xca, 0xbe, 0x82, 0x50, 0x2b, 0xb5, 0xeb, 0x56, 0x55,
	0x73, 0xc7, 0x86, 0xd0, 0xbf, 0xb1, 0xdd, 0x6c, 0xc7, 0x8b, 0xa5, 0x10, 0xdd, 0x9a, 0x65, 0x75,
	0x2c, 0x91, 0x5d, 0x03, 0x34, 0xff, 0xe8, 0xca, 0xa7, 0xdd, 0x8c, 0xbf, 0xda, 0x8c, 0xdb, 0x5f,
	0xb0, 0xda, 0xdf, 0xf9, 0x3f, 0x1f, 0x0e, 0xcd, 0xb4, 0x26, 0x28, 0x7f, 0x95, 0x05, 0x92, 0x0b,
	0x88, 0x97, 0x13, 0x24, 0x47, 0xce, 0xb7, 0xf1, 0x32, 0x7c, 0xe1, 0x70, 0x6b, 0xc8, 0xec, 0x80,
	0x5c, 0xc2, 0x13, 0x47, 0x5f, 0xdd, 0x37, 0x3d, 0x6d, 0x34, 0x3d, 0xe6, 0x43, 0xba, 0xad, 0x5e,
	0x13, 0x5f, 0x40, 0xf2, 0x1e, 0x67, 0xa8, 0xd0, 0xbe, 0x27, 0xdb, 0xda, 0x53, 0x47, 0x6c, 0x86,
	0x87, 0x1d, 0x90, 0x77, 0x90, 0x98, 0xb8, 0x1b, 0xe5, 0xc9, 0x86, 0xd2, 0xdc, 0xec, 0x56, 0x9b,
	0x09, 0x3e, 0xa4, 0x36, 0x37, 0x3b, 0xd4, 0x97, 0x10, 0x7f, 0xcc, 0xe5, 0x0f, 0xa3, 0x25, 0xeb,
	0xc3, 0xb2, 0xd2, 0x1d, 0x2d, 0x5f, 0x25, 0x9f, 0xe3, 0x6a, 0x6a, 0x1f, 0xd6, 0x69, 0xa4, 0x5f,
	0xd6, 0xb7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x80, 0x52, 0x12, 0x70, 0x05, 0x00, 0x00,
}
