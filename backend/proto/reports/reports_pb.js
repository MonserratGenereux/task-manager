/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var habits_habits_pb = require('../habits/habits_pb.js');
var tasks_tasks_pb = require('../tasks/tasks_pb.js');
goog.exportSymbol('proto.reports.AccountID', null, global);
goog.exportSymbol('proto.reports.Empty', null, global);
goog.exportSymbol('proto.reports.HabitsReport', null, global);
goog.exportSymbol('proto.reports.HabitsReport.RangeCount', null, global);
goog.exportSymbol('proto.reports.HabitsUserReport', null, global);
goog.exportSymbol('proto.reports.TasksReport', null, global);
goog.exportSymbol('proto.reports.TasksReport.AvailableTasks', null, global);
goog.exportSymbol('proto.reports.TasksReport.CompletedTasks', null, global);
goog.exportSymbol('proto.reports.TasksUserReport', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reports.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.Empty.displayName = 'proto.reports.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.Empty}
 */
proto.reports.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.Empty;
  return proto.reports.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.Empty}
 */
proto.reports.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.AccountID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reports.AccountID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.AccountID.displayName = 'proto.reports.AccountID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.AccountID.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.AccountID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.AccountID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.AccountID.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.AccountID}
 */
proto.reports.AccountID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.AccountID;
  return proto.reports.AccountID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.AccountID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.AccountID}
 */
proto.reports.AccountID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.AccountID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.AccountID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.AccountID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.AccountID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.reports.AccountID.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.reports.AccountID.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.HabitsReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reports.HabitsReport.repeatedFields_, null);
};
goog.inherits(proto.reports.HabitsReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.HabitsReport.displayName = 'proto.reports.HabitsReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reports.HabitsReport.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.HabitsReport.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.HabitsReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.HabitsReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.HabitsReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    rangeCountsList: jspb.Message.toObjectList(msg.getRangeCountsList(),
    proto.reports.HabitsReport.RangeCount.toObject, includeInstance),
    worst: (f = msg.getWorst()) && habits_habits_pb.Habit.toObject(includeInstance, f),
    best: (f = msg.getBest()) && habits_habits_pb.Habit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.HabitsReport}
 */
proto.reports.HabitsReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.HabitsReport;
  return proto.reports.HabitsReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.HabitsReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.HabitsReport}
 */
proto.reports.HabitsReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reports.HabitsReport.RangeCount;
      reader.readMessage(value,proto.reports.HabitsReport.RangeCount.deserializeBinaryFromReader);
      msg.addRangeCounts(value);
      break;
    case 2:
      var value = new habits_habits_pb.Habit;
      reader.readMessage(value,habits_habits_pb.Habit.deserializeBinaryFromReader);
      msg.setWorst(value);
      break;
    case 3:
      var value = new habits_habits_pb.Habit;
      reader.readMessage(value,habits_habits_pb.Habit.deserializeBinaryFromReader);
      msg.setBest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.HabitsReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.HabitsReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.HabitsReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.HabitsReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRangeCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.reports.HabitsReport.RangeCount.serializeBinaryToWriter
    );
  }
  f = message.getWorst();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      habits_habits_pb.Habit.serializeBinaryToWriter
    );
  }
  f = message.getBest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      habits_habits_pb.Habit.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.HabitsReport.RangeCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reports.HabitsReport.RangeCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.HabitsReport.RangeCount.displayName = 'proto.reports.HabitsReport.RangeCount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.HabitsReport.RangeCount.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.HabitsReport.RangeCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.HabitsReport.RangeCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.HabitsReport.RangeCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.HabitsReport.RangeCount}
 */
proto.reports.HabitsReport.RangeCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.HabitsReport.RangeCount;
  return proto.reports.HabitsReport.RangeCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.HabitsReport.RangeCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.HabitsReport.RangeCount}
 */
proto.reports.HabitsReport.RangeCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.HabitsReport.RangeCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.HabitsReport.RangeCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.HabitsReport.RangeCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.HabitsReport.RangeCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string color = 1;
 * @return {string}
 */
proto.reports.HabitsReport.RangeCount.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.reports.HabitsReport.RangeCount.prototype.setColor = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 count = 2;
 * @return {number}
 */
proto.reports.HabitsReport.RangeCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.reports.HabitsReport.RangeCount.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated RangeCount range_counts = 1;
 * @return {!Array.<!proto.reports.HabitsReport.RangeCount>}
 */
proto.reports.HabitsReport.prototype.getRangeCountsList = function() {
  return /** @type{!Array.<!proto.reports.HabitsReport.RangeCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.reports.HabitsReport.RangeCount, 1));
};


/** @param {!Array.<!proto.reports.HabitsReport.RangeCount>} value */
proto.reports.HabitsReport.prototype.setRangeCountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.reports.HabitsReport.RangeCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.reports.HabitsReport.RangeCount}
 */
proto.reports.HabitsReport.prototype.addRangeCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.reports.HabitsReport.RangeCount, opt_index);
};


proto.reports.HabitsReport.prototype.clearRangeCountsList = function() {
  this.setRangeCountsList([]);
};


/**
 * optional habits.Habit worst = 2;
 * @return {?proto.habits.Habit}
 */
proto.reports.HabitsReport.prototype.getWorst = function() {
  return /** @type{?proto.habits.Habit} */ (
    jspb.Message.getWrapperField(this, habits_habits_pb.Habit, 2));
};


/** @param {?proto.habits.Habit|undefined} value */
proto.reports.HabitsReport.prototype.setWorst = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.reports.HabitsReport.prototype.clearWorst = function() {
  this.setWorst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reports.HabitsReport.prototype.hasWorst = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional habits.Habit best = 3;
 * @return {?proto.habits.Habit}
 */
proto.reports.HabitsReport.prototype.getBest = function() {
  return /** @type{?proto.habits.Habit} */ (
    jspb.Message.getWrapperField(this, habits_habits_pb.Habit, 3));
};


/** @param {?proto.habits.Habit|undefined} value */
proto.reports.HabitsReport.prototype.setBest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.reports.HabitsReport.prototype.clearBest = function() {
  this.setBest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reports.HabitsReport.prototype.hasBest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.HabitsUserReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reports.HabitsUserReport.repeatedFields_, null);
};
goog.inherits(proto.reports.HabitsUserReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.HabitsUserReport.displayName = 'proto.reports.HabitsUserReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reports.HabitsUserReport.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.HabitsUserReport.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.HabitsUserReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.HabitsUserReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.HabitsUserReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    goodHabitsList: jspb.Message.toObjectList(msg.getGoodHabitsList(),
    habits_habits_pb.Habit.toObject, includeInstance),
    badHabitsList: jspb.Message.toObjectList(msg.getBadHabitsList(),
    habits_habits_pb.Habit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.HabitsUserReport}
 */
proto.reports.HabitsUserReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.HabitsUserReport;
  return proto.reports.HabitsUserReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.HabitsUserReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.HabitsUserReport}
 */
proto.reports.HabitsUserReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new habits_habits_pb.Habit;
      reader.readMessage(value,habits_habits_pb.Habit.deserializeBinaryFromReader);
      msg.addGoodHabits(value);
      break;
    case 2:
      var value = new habits_habits_pb.Habit;
      reader.readMessage(value,habits_habits_pb.Habit.deserializeBinaryFromReader);
      msg.addBadHabits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.HabitsUserReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.HabitsUserReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.HabitsUserReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.HabitsUserReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGoodHabitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      habits_habits_pb.Habit.serializeBinaryToWriter
    );
  }
  f = message.getBadHabitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      habits_habits_pb.Habit.serializeBinaryToWriter
    );
  }
};


/**
 * repeated habits.Habit good_habits = 1;
 * @return {!Array.<!proto.habits.Habit>}
 */
proto.reports.HabitsUserReport.prototype.getGoodHabitsList = function() {
  return /** @type{!Array.<!proto.habits.Habit>} */ (
    jspb.Message.getRepeatedWrapperField(this, habits_habits_pb.Habit, 1));
};


/** @param {!Array.<!proto.habits.Habit>} value */
proto.reports.HabitsUserReport.prototype.setGoodHabitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.habits.Habit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.habits.Habit}
 */
proto.reports.HabitsUserReport.prototype.addGoodHabits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.habits.Habit, opt_index);
};


proto.reports.HabitsUserReport.prototype.clearGoodHabitsList = function() {
  this.setGoodHabitsList([]);
};


/**
 * repeated habits.Habit bad_habits = 2;
 * @return {!Array.<!proto.habits.Habit>}
 */
proto.reports.HabitsUserReport.prototype.getBadHabitsList = function() {
  return /** @type{!Array.<!proto.habits.Habit>} */ (
    jspb.Message.getRepeatedWrapperField(this, habits_habits_pb.Habit, 2));
};


/** @param {!Array.<!proto.habits.Habit>} value */
proto.reports.HabitsUserReport.prototype.setBadHabitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.habits.Habit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.habits.Habit}
 */
proto.reports.HabitsUserReport.prototype.addBadHabits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.habits.Habit, opt_index);
};


proto.reports.HabitsUserReport.prototype.clearBadHabitsList = function() {
  this.setBadHabitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.TasksUserReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reports.TasksUserReport.repeatedFields_, null);
};
goog.inherits(proto.reports.TasksUserReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.TasksUserReport.displayName = 'proto.reports.TasksUserReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reports.TasksUserReport.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.TasksUserReport.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.TasksUserReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.TasksUserReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksUserReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    delayedList: jspb.Message.toObjectList(msg.getDelayedList(),
    tasks_tasks_pb.Task.toObject, includeInstance),
    duetodayList: jspb.Message.toObjectList(msg.getDuetodayList(),
    tasks_tasks_pb.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.TasksUserReport}
 */
proto.reports.TasksUserReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.TasksUserReport;
  return proto.reports.TasksUserReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.TasksUserReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.TasksUserReport}
 */
proto.reports.TasksUserReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tasks_tasks_pb.Task;
      reader.readMessage(value,tasks_tasks_pb.Task.deserializeBinaryFromReader);
      msg.addDelayed(value);
      break;
    case 2:
      var value = new tasks_tasks_pb.Task;
      reader.readMessage(value,tasks_tasks_pb.Task.deserializeBinaryFromReader);
      msg.addDuetoday(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.TasksUserReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.TasksUserReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.TasksUserReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksUserReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelayedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      tasks_tasks_pb.Task.serializeBinaryToWriter
    );
  }
  f = message.getDuetodayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      tasks_tasks_pb.Task.serializeBinaryToWriter
    );
  }
};


/**
 * repeated tasks.Task delayed = 1;
 * @return {!Array.<!proto.tasks.Task>}
 */
proto.reports.TasksUserReport.prototype.getDelayedList = function() {
  return /** @type{!Array.<!proto.tasks.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, tasks_tasks_pb.Task, 1));
};


/** @param {!Array.<!proto.tasks.Task>} value */
proto.reports.TasksUserReport.prototype.setDelayedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tasks.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.Task}
 */
proto.reports.TasksUserReport.prototype.addDelayed = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tasks.Task, opt_index);
};


proto.reports.TasksUserReport.prototype.clearDelayedList = function() {
  this.setDelayedList([]);
};


/**
 * repeated tasks.Task dueToday = 2;
 * @return {!Array.<!proto.tasks.Task>}
 */
proto.reports.TasksUserReport.prototype.getDuetodayList = function() {
  return /** @type{!Array.<!proto.tasks.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, tasks_tasks_pb.Task, 2));
};


/** @param {!Array.<!proto.tasks.Task>} value */
proto.reports.TasksUserReport.prototype.setDuetodayList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tasks.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tasks.Task}
 */
proto.reports.TasksUserReport.prototype.addDuetoday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tasks.Task, opt_index);
};


proto.reports.TasksUserReport.prototype.clearDuetodayList = function() {
  this.setDuetodayList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.TasksReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reports.TasksReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.TasksReport.displayName = 'proto.reports.TasksReport';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.TasksReport.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.TasksReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.TasksReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    completedTasks: (f = msg.getCompletedTasks()) && proto.reports.TasksReport.CompletedTasks.toObject(includeInstance, f),
    availableTasks: (f = msg.getAvailableTasks()) && proto.reports.TasksReport.AvailableTasks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.TasksReport}
 */
proto.reports.TasksReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.TasksReport;
  return proto.reports.TasksReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.TasksReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.TasksReport}
 */
proto.reports.TasksReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reports.TasksReport.CompletedTasks;
      reader.readMessage(value,proto.reports.TasksReport.CompletedTasks.deserializeBinaryFromReader);
      msg.setCompletedTasks(value);
      break;
    case 2:
      var value = new proto.reports.TasksReport.AvailableTasks;
      reader.readMessage(value,proto.reports.TasksReport.AvailableTasks.deserializeBinaryFromReader);
      msg.setAvailableTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.TasksReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.TasksReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.TasksReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompletedTasks();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reports.TasksReport.CompletedTasks.serializeBinaryToWriter
    );
  }
  f = message.getAvailableTasks();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reports.TasksReport.AvailableTasks.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.TasksReport.CompletedTasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reports.TasksReport.CompletedTasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.TasksReport.CompletedTasks.displayName = 'proto.reports.TasksReport.CompletedTasks';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.TasksReport.CompletedTasks.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.TasksReport.CompletedTasks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.TasksReport.CompletedTasks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksReport.CompletedTasks.toObject = function(includeInstance, msg) {
  var f, obj = {
    ontime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    beforetime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    delayed: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.TasksReport.CompletedTasks}
 */
proto.reports.TasksReport.CompletedTasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.TasksReport.CompletedTasks;
  return proto.reports.TasksReport.CompletedTasks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.TasksReport.CompletedTasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.TasksReport.CompletedTasks}
 */
proto.reports.TasksReport.CompletedTasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOntime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBeforetime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelayed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.TasksReport.CompletedTasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.TasksReport.CompletedTasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.TasksReport.CompletedTasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksReport.CompletedTasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOntime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBeforetime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDelayed();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 onTime = 1;
 * @return {number}
 */
proto.reports.TasksReport.CompletedTasks.prototype.getOntime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.reports.TasksReport.CompletedTasks.prototype.setOntime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 beforeTime = 2;
 * @return {number}
 */
proto.reports.TasksReport.CompletedTasks.prototype.getBeforetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.reports.TasksReport.CompletedTasks.prototype.setBeforetime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 delayed = 3;
 * @return {number}
 */
proto.reports.TasksReport.CompletedTasks.prototype.getDelayed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.reports.TasksReport.CompletedTasks.prototype.setDelayed = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reports.TasksReport.AvailableTasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reports.TasksReport.AvailableTasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.reports.TasksReport.AvailableTasks.displayName = 'proto.reports.TasksReport.AvailableTasks';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reports.TasksReport.AvailableTasks.prototype.toObject = function(opt_includeInstance) {
  return proto.reports.TasksReport.AvailableTasks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reports.TasksReport.AvailableTasks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksReport.AvailableTasks.toObject = function(includeInstance, msg) {
  var f, obj = {
    remaining: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fortoday: jspb.Message.getFieldWithDefault(msg, 2, 0),
    delayed: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reports.TasksReport.AvailableTasks}
 */
proto.reports.TasksReport.AvailableTasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reports.TasksReport.AvailableTasks;
  return proto.reports.TasksReport.AvailableTasks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reports.TasksReport.AvailableTasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reports.TasksReport.AvailableTasks}
 */
proto.reports.TasksReport.AvailableTasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRemaining(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFortoday(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelayed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reports.TasksReport.AvailableTasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reports.TasksReport.AvailableTasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reports.TasksReport.AvailableTasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reports.TasksReport.AvailableTasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemaining();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFortoday();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDelayed();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 remaining = 1;
 * @return {number}
 */
proto.reports.TasksReport.AvailableTasks.prototype.getRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.reports.TasksReport.AvailableTasks.prototype.setRemaining = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 forToday = 2;
 * @return {number}
 */
proto.reports.TasksReport.AvailableTasks.prototype.getFortoday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.reports.TasksReport.AvailableTasks.prototype.setFortoday = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 delayed = 3;
 * @return {number}
 */
proto.reports.TasksReport.AvailableTasks.prototype.getDelayed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.reports.TasksReport.AvailableTasks.prototype.setDelayed = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional CompletedTasks completed_tasks = 1;
 * @return {?proto.reports.TasksReport.CompletedTasks}
 */
proto.reports.TasksReport.prototype.getCompletedTasks = function() {
  return /** @type{?proto.reports.TasksReport.CompletedTasks} */ (
    jspb.Message.getWrapperField(this, proto.reports.TasksReport.CompletedTasks, 1));
};


/** @param {?proto.reports.TasksReport.CompletedTasks|undefined} value */
proto.reports.TasksReport.prototype.setCompletedTasks = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.reports.TasksReport.prototype.clearCompletedTasks = function() {
  this.setCompletedTasks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reports.TasksReport.prototype.hasCompletedTasks = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AvailableTasks available_tasks = 2;
 * @return {?proto.reports.TasksReport.AvailableTasks}
 */
proto.reports.TasksReport.prototype.getAvailableTasks = function() {
  return /** @type{?proto.reports.TasksReport.AvailableTasks} */ (
    jspb.Message.getWrapperField(this, proto.reports.TasksReport.AvailableTasks, 2));
};


/** @param {?proto.reports.TasksReport.AvailableTasks|undefined} value */
proto.reports.TasksReport.prototype.setAvailableTasks = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.reports.TasksReport.prototype.clearAvailableTasks = function() {
  this.setAvailableTasks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.reports.TasksReport.prototype.hasAvailableTasks = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.reports);
