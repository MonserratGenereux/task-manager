// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account.proto

It has these top-level messages:
	Account
	StatusResponse
	AccountID
	AccountUsername
	GetAccountResponse
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
type Account struct {
	// Unique account id in the Task Manager system.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Unique username.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// User's email.
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// Account password
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Account) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type StatusResponse struct {
	Succeded  bool   `protobuf:"varint,1,opt,name=succeded" json:"succeded,omitempty"`
	AccountId int64  `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Error     string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusResponse) GetSucceded() bool {
	if m != nil {
		return m.Succeded
	}
	return false
}

func (m *StatusResponse) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *StatusResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AccountID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountID) Reset()                    { *m = AccountID{} }
func (m *AccountID) String() string            { return proto.CompactTextString(m) }
func (*AccountID) ProtoMessage()               {}
func (*AccountID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AccountUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *AccountUsername) Reset()                    { *m = AccountUsername{} }
func (m *AccountUsername) String() string            { return proto.CompactTextString(m) }
func (*AccountUsername) ProtoMessage()               {}
func (*AccountUsername) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetAccountResponse struct {
	Exists  bool     `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Account *Account `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *GetAccountResponse) Reset()                    { *m = GetAccountResponse{} }
func (m *GetAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountResponse) ProtoMessage()               {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetAccountResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *GetAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "account.Account")
	proto.RegisterType((*StatusResponse)(nil), "account.StatusResponse")
	proto.RegisterType((*AccountID)(nil), "account.AccountID")
	proto.RegisterType((*AccountUsername)(nil), "account.AccountUsername")
	proto.RegisterType((*GetAccountResponse)(nil), "account.GetAccountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountService service

type AccountServiceClient interface {
	// Retrieve account by username
	GetAccountByID(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Retrieve account by username
	GetAccountByUsername(ctx context.Context, in *AccountUsername, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Creates new account. Id must be empty.
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*StatusResponse, error)
	// Updates all fields in the given account. Id must be set.
	UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*StatusResponse, error)
	// Deletes the accounts given its id.
	DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*StatusResponse, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetAccountByID(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := grpc.Invoke(ctx, "/account.AccountService/GetAccountByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountByUsername(ctx context.Context, in *AccountUsername, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := grpc.Invoke(ctx, "/account.AccountService/GetAccountByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/account.AccountService/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/account.AccountService/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccount(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/account.AccountService/DeleteAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceServer interface {
	// Retrieve account by username
	GetAccountByID(context.Context, *AccountID) (*GetAccountResponse, error)
	// Retrieve account by username
	GetAccountByUsername(context.Context, *AccountUsername) (*GetAccountResponse, error)
	// Creates new account. Id must be empty.
	CreateAccount(context.Context, *Account) (*StatusResponse, error)
	// Updates all fields in the given account. Id must be set.
	UpdateAccount(context.Context, *Account) (*StatusResponse, error)
	// Deletes the accounts given its id.
	DeleteAccount(context.Context, *AccountID) (*StatusResponse, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_GetAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByID(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetAccountByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByUsername(ctx, req.(*AccountUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccount(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountByID",
			Handler:    _AccountService_GetAccountByID_Handler,
		},
		{
			MethodName: "GetAccountByUsername",
			Handler:    _AccountService_GetAccountByUsername_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountService_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

func init() { proto.RegisterFile("account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x35, 0xa9, 0xf6, 0x63, 0xa4, 0x51, 0x96, 0xa2, 0xa1, 0x45, 0x28, 0x39, 0x15, 0xc1, 0x1e,
	0xea, 0x55, 0x04, 0x6d, 0x40, 0x72, 0x12, 0x52, 0x0a, 0xde, 0x64, 0xcd, 0x0e, 0xb2, 0xd0, 0x76,
	0xc3, 0xee, 0xc6, 0x8f, 0xbf, 0xeb, 0x2f, 0x91, 0x26, 0xbb, 0xdb, 0x36, 0x55, 0x04, 0x6f, 0x79,
	0x33, 0xfb, 0xe6, 0xbd, 0x37, 0x19, 0xe8, 0xd2, 0x2c, 0x13, 0xc5, 0x4a, 0x8f, 0x73, 0x29, 0xb4,
	0x20, 0x2d, 0x03, 0xa3, 0x57, 0x68, 0xdd, 0x55, 0x9f, 0x24, 0x00, 0x9f, 0xb3, 0xd0, 0x1b, 0x7a,
	0xa3, 0x46, 0xea, 0x73, 0x46, 0xfa, 0xd0, 0x2e, 0x14, 0xca, 0x15, 0x5d, 0x62, 0xe8, 0x0f, 0xbd,
	0x51, 0x27, 0x75, 0x98, 0xf4, 0xe0, 0x08, 0x97, 0x94, 0x2f, 0xc2, 0x46, 0xd9, 0xa8, 0xc0, 0x9a,
	0x91, 0x53, 0xa5, 0xde, 0x85, 0x64, 0xe1, 0x61, 0xc5, 0xb0, 0x38, 0xa2, 0x10, 0xcc, 0x34, 0xd5,
	0x85, 0x4a, 0x51, 0xe5, 0x62, 0xa5, 0x70, 0xfd, 0x5a, 0x15, 0x59, 0x86, 0x0c, 0x2b, 0xd5, 0x76,
	0xea, 0x30, 0xb9, 0x00, 0x30, 0x0e, 0x9f, 0x39, 0x2b, 0xd5, 0x1b, 0x69, 0xc7, 0x54, 0x12, 0x56,
	0xca, 0x4b, 0x29, 0xa4, 0x93, 0x5f, 0x83, 0x68, 0x00, 0x1d, 0x93, 0x25, 0x89, 0xeb, 0x69, 0xa2,
	0x2b, 0x38, 0x31, 0xcd, 0xb9, 0x0d, 0xb1, 0x1d, 0xd0, 0xdb, 0x0d, 0x18, 0x3d, 0x01, 0x79, 0x40,
	0x6d, 0x18, 0xce, 0xf2, 0x19, 0x34, 0xf1, 0x83, 0x2b, 0xad, 0x8c, 0x61, 0x83, 0xc8, 0x25, 0xd8,
	0x85, 0x96, 0x5e, 0x8f, 0x27, 0xa7, 0x63, 0xbb, 0x6f, 0x3b, 0xc2, 0x3e, 0x98, 0x7c, 0xf9, 0x10,
	0x98, 0xe2, 0x0c, 0xe5, 0x1b, 0xcf, 0x90, 0x4c, 0x21, 0xd8, 0x88, 0xdd, 0x7f, 0x26, 0x31, 0x21,
	0x75, 0x7e, 0x12, 0xf7, 0x07, 0xae, 0xb6, 0xef, 0x2c, 0x3a, 0x20, 0x8f, 0xd0, 0xdb, 0x1e, 0xe2,
	0x52, 0x86, 0xf5, 0x51, 0xb6, 0xf3, 0xd7, 0xc0, 0x1b, 0xe8, 0x4e, 0x25, 0x52, 0x8d, 0xf6, 0x40,
	0xf6, 0x42, 0xf5, 0xcf, 0x5d, 0x65, 0xf7, 0xdf, 0x56, 0xec, 0x79, 0xce, 0xfe, 0xcb, 0xbe, 0x85,
	0x6e, 0x8c, 0x0b, 0xdc, 0xb0, 0x7f, 0x5a, 0xc8, 0xef, 0xfc, 0x97, 0x66, 0x79, 0xe6, 0xd7, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xab, 0xf0, 0x37, 0xea, 0xf7, 0x02, 0x00, 0x00,
}
